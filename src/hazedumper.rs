#![allow(non_snake_case)]
use serde::{Deserialize, Serialize};
use std::fs;

#[derive(Serialize, Deserialize)]
pub struct Haze {
    pub signatures: Signatures,
    pub netvars: Netvars,
}

#[derive(Serialize, Deserialize)]
pub struct Signatures {
    pub anim_overlays: Option<u64>,
    pub clientstate_choked_commands: Option<u64>,
    pub clientstate_delta_ticks: Option<u64>,
    pub clientstate_last_outgoing_command: Option<u64>,
    pub clientstate_net_channel: Option<u64>,
    pub convar_name_hash_table: Option<u64>,
    pub dwClientState: Option<u64>,
    pub dwClientState_GetLocalPlayer: Option<u64>,
    pub dwClientState_IsHLTV: Option<u64>,
    pub dwClientState_Map: Option<u64>,
    pub dwClientState_MapDirectory: Option<u64>,
    pub dwClientState_MaxPlayer: Option<u64>,
    pub dwClientState_PlayerInfo: Option<u64>,
    pub dwClientState_State: Option<u64>,
    pub dwClientState_ViewAngles: Option<u64>,
    pub dwEntityList: Option<u64>,
    pub dwForceAttack: Option<u64>,
    pub dwForceAttack2: Option<u64>,
    pub dwForceBackward: Option<u64>,
    pub dwForceForward: Option<u64>,
    pub dwForceJump: Option<u64>,
    pub dwForceLeft: Option<u64>,
    pub dwForceRight: Option<u64>,
    pub dwGameDir: Option<u64>,
    pub dwGameRulesProxy: Option<u64>,
    pub dwGetAllClasses: Option<u64>,
    pub dwGlobalVars: Option<u64>,
    pub dwGlowObjectManager: Option<u64>,
    pub dwInput: Option<u64>,
    pub dwInterfaceLinkList: Option<u64>,
    pub dwLocalPlayer: Option<u64>,
    pub dwMouseEnable: Option<u64>,
    pub dwMouseEnablePtr: Option<u64>,
    pub dwPlayerResource: Option<u64>,
    pub dwRadarBase: Option<u64>,
    pub dwSensitivity: Option<u64>,
    pub dwSensitivityPtr: Option<u64>,
    pub dwSetClanTag: Option<u64>,
    pub dwViewMatrix: Option<u64>,
    pub dwWeaponTable: Option<u64>,
    pub dwWeaponTableIndex: Option<u64>,
    pub dwYawPtr: Option<u64>,
    pub dwZoomSensitivityRatioPtr: Option<u64>,
    pub dwbSendPackets: Option<u64>,
    pub dwppDirect3DDevice9: Option<u64>,
    pub find_hud_element: Option<u64>,
    pub force_update_spectator_glow: Option<u64>,
    pub interface_engine_cvar: Option<u64>,
    pub is_c4_owner: Option<u64>,
    pub m_bDormant: Option<u64>,
    pub m_bIsLocalPlayer: Option<u64>,
    pub m_flSpawnTime: Option<u64>,
    pub m_pStudioHdr: Option<u64>,
    pub m_pitchClassPtr: Option<u64>,
    pub m_yawClassPtr: Option<u64>,
    pub model_ambient_min: Option<u64>,
    pub set_abs_angles: Option<u64>,
    pub set_abs_origin: Option<u64>,
}

#[derive(Serialize, Deserialize)]
pub struct Netvars {
    pub cs_gamerules_data: Option<u64>,
    pub m_ArmorValue: Option<u64>,
    pub m_Collision: Option<u64>,
    pub m_CollisionGroup: Option<u64>,
    pub m_Local: Option<u64>,
    pub m_MoveType: Option<u64>,
    pub m_OriginalOwnerXuidHigh: Option<u64>,
    pub m_OriginalOwnerXuidLow: Option<u64>,
    pub m_SurvivalGameRuleDecisionTypes: Option<u64>,
    pub m_SurvivalRules: Option<u64>,
    pub m_aimPunchAngle: Option<u64>,
    pub m_aimPunchAngleVel: Option<u64>,
    pub m_angEyeAnglesX: Option<u64>,
    pub m_angEyeAnglesY: Option<u64>,
    pub m_bBombDefused: Option<u64>,
    pub m_bBombPlanted: Option<u64>,
    pub m_bBombTicking: Option<u64>,
    pub m_bFreezePeriod: Option<u64>,
    pub m_bGunGameImmunity: Option<u64>,
    pub m_bHasDefuser: Option<u64>,
    pub m_bHasHelmet: Option<u64>,
    pub m_bInReload: Option<u64>,
    pub m_bIsDefusing: Option<u64>,
    pub m_bIsQueuedMatchmaking: Option<u64>,
    pub m_bIsScoped: Option<u64>,
    pub m_bIsValveDS: Option<u64>,
    pub m_bSpotted: Option<u64>,
    pub m_bSpottedByMask: Option<u64>,
    pub m_bStartedArming: Option<u64>,
    pub m_bUseCustomAutoExposureMax: Option<u64>,
    pub m_bUseCustomAutoExposureMin: Option<u64>,
    pub m_bUseCustomBloomScale: Option<u64>,
    pub m_clrRender: Option<u64>,
    pub m_dwBoneMatrix: Option<u64>,
    pub m_fAccuracyPenalty: Option<u64>,
    pub m_fFlags: Option<u64>,
    pub m_flC4Blow: Option<u64>,
    pub m_flCustomAutoExposureMax: Option<u64>,
    pub m_flCustomAutoExposureMin: Option<u64>,
    pub m_flCustomBloomScale: Option<u64>,
    pub m_flDefuseCountDown: Option<u64>,
    pub m_flDefuseLength: Option<u64>,
    pub m_flFallbackWear: Option<u64>,
    pub m_flFlashDuration: Option<u64>,
    pub m_flFlashMaxAlpha: Option<u64>,
    pub m_flLastBoneSetupTime: Option<u64>,
    pub m_flLowerBodyYawTarget: Option<u64>,
    pub m_flNextAttack: Option<u64>,
    pub m_flNextPrimaryAttack: Option<u64>,
    pub m_flSimulationTime: Option<u64>,
    pub m_flTimerLength: Option<u64>,
    pub m_hActiveWeapon: Option<u64>,
    pub m_hBombDefuser: Option<u64>,
    pub m_hMyWeapons: Option<u64>,
    pub m_hObserverTarget: Option<u64>,
    pub m_hOwner: Option<u64>,
    pub m_hOwnerEntity: Option<u64>,
    pub m_hViewModel: Option<u64>,
    pub m_iAccountID: Option<u64>,
    pub m_iClip1: Option<u64>,
    pub m_iCompetitiveRanking: Option<u64>,
    pub m_iCompetitiveWins: Option<u64>,
    pub m_iCrosshairId: Option<u64>,
    pub m_iDefaultFOV: Option<u64>,
    pub m_iEntityQuality: Option<u64>,
    pub m_iFOV: Option<u64>,
    pub m_iFOVStart: Option<u64>,
    pub m_iGlowIndex: Option<u64>,
    pub m_iHealth: Option<u64>,
    pub m_iItemDefinitionIndex: Option<u64>,
    pub m_iItemIDHigh: Option<u64>,
    pub m_iMostRecentModelBoneCounter: Option<u64>,
    pub m_iObserverMode: Option<u64>,
    pub m_iShotsFired: Option<u64>,
    pub m_iState: Option<u64>,
    pub m_iTeamNum: Option<u64>,
    pub m_lifeState: Option<u64>,
    pub m_nBombSite: Option<u64>,
    pub m_nFallbackPaintKit: Option<u64>,
    pub m_nFallbackSeed: Option<u64>,
    pub m_nFallbackStatTrak: Option<u64>,
    pub m_nForceBone: Option<u64>,
    pub m_nModelIndex: Option<u64>,
    pub m_nTickBase: Option<u64>,
    pub m_nViewModelIndex: Option<u64>,
    pub m_rgflCoordinateFrame: Option<u64>,
    pub m_szCustomName: Option<u64>,
    pub m_szLastPlaceName: Option<u64>,
    pub m_thirdPersonViewAngles: Option<u64>,
    pub m_vecOrigin: Option<u64>,
    pub m_vecVelocity: Option<u64>,
    pub m_vecViewOffset: Option<u64>,
    pub m_viewPunchAngle: Option<u64>,
    pub m_zoomLevel: Option<u64>,
}

pub fn init_hazedumper() -> Haze {
    let file = fs::read_to_string("./Csgo.toml").expect("Error: read base address file error");
    let haze: Haze = toml::from_str(&file).expect("parse hazedumper file error");
    return haze;
}
